// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Editor Component user possibly create a Editor component. should render a Editor 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Editor />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "onBeforeChange": undefined,
      "options": Object {
        "lineNumbers": false,
        "lineWrapping": true,
        "mode": "markdown",
        "scrollBarStyle": null,
        "tabSize": 4,
        "theme": "monokai",
        "viewportMargin": Infinity,
      },
      "value": undefined,
      "width": "100%",
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "onBeforeChange": undefined,
        "options": Object {
          "lineNumbers": false,
          "lineWrapping": true,
          "mode": "markdown",
          "scrollBarStyle": null,
          "tabSize": 4,
          "theme": "monokai",
          "viewportMargin": Infinity,
        },
        "value": undefined,
        "width": "100%",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
