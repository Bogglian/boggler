// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InputFileForm Component user possibly create a InputFileForm component. should render a InputFileForm 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <InputFileForm />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <ForwardRef
        id="hover"
      >
        <form>
          <label
            htmlFor="file-upload"
          >
            UPLOAD
          </label>
          <ForwardRef
            accept=".wav"
            id="file-upload"
            name="upload"
            type="file"
          />
          <ForwardRef
            disabled={true}
            id="file-submit-block"
            type="button"
            value="SUBMIT"
          />
          <ForwardRef
            id="file-submit"
            type="button"
            value="TO PDF"
          />
        </form>
        <AudioProgressbar
          className="none"
        />
      </ForwardRef>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <form>
            <label
              htmlFor="file-upload"
            >
              UPLOAD
            </label>
            <ForwardRef
              accept=".wav"
              id="file-upload"
              name="upload"
              type="file"
            />
            <ForwardRef
              disabled={true}
              id="file-submit-block"
              type="button"
              value="SUBMIT"
            />
            <ForwardRef
              id="file-submit"
              type="button"
              value="TO PDF"
            />
          </form>,
          <AudioProgressbar
            className="none"
          />,
        ],
        "id": "hover",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <label
                htmlFor="file-upload"
              >
                UPLOAD
              </label>,
              <ForwardRef
                accept=".wav"
                id="file-upload"
                name="upload"
                type="file"
              />,
              <ForwardRef
                disabled={true}
                id="file-submit-block"
                type="button"
                value="SUBMIT"
              />,
              <ForwardRef
                id="file-submit"
                type="button"
                value="TO PDF"
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "UPLOAD",
                "htmlFor": "file-upload",
              },
              "ref": null,
              "rendered": "UPLOAD",
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "accept": ".wav",
                "id": "file-upload",
                "name": "upload",
                "onChange": undefined,
                "type": "file",
              },
              "ref": null,
              "rendered": null,
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": true,
                  "rules": Array [
                    "
  & {
    width: 100%;
    height: 100%;
    ",
                    "
      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
    ",
                    ";
    display: flex;
    border-radius: inherit;
  }

  &#file-upload {
    display: none;
  }

  &#file-upload-block {
    display: none;
  }

  &#file-submit {
    font-weight: bold;
    background-color: ",
                    "#66d9e8",
                    ";
    border-radius: 0.2em;
    margin-right: 2%;
    display: inherit;
    padding: 0.6em 0.8em;
    font-size: 1.2em;

    :hover {
      color: white;
      background-color: ",
                    "#22b8cf",
                    ";
    }
    :active {
      background-color: ",
                    "#66d9e8",
                    ";
    }
  }

  &#file-submit-block {
    font-weight: bold;
    background-color: ",
                    "#66d9e8",
                    ";
    border-radius: 0.2em;
    margin-right: 2%;
    display: inherit;
    padding: 0.6em 0.8em;
    font-size: 1.2em;
  }
",
                  ],
                },
                "displayName": "styled.input",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "disabled": true,
                "id": "file-submit-block",
                "onClick": undefined,
                "type": "button",
                "value": "SUBMIT",
              },
              "ref": null,
              "rendered": null,
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": true,
                  "rules": Array [
                    "
  & {
    width: 100%;
    height: 100%;
    ",
                    "
      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
    ",
                    ";
    display: flex;
    border-radius: inherit;
  }

  &#file-upload {
    display: none;
  }

  &#file-upload-block {
    display: none;
  }

  &#file-submit {
    font-weight: bold;
    background-color: ",
                    "#66d9e8",
                    ";
    border-radius: 0.2em;
    margin-right: 2%;
    display: inherit;
    padding: 0.6em 0.8em;
    font-size: 1.2em;

    :hover {
      color: white;
      background-color: ",
                    "#22b8cf",
                    ";
    }
    :active {
      background-color: ",
                    "#66d9e8",
                    ";
    }
  }

  &#file-submit-block {
    font-weight: bold;
    background-color: ",
                    "#66d9e8",
                    ";
    border-radius: 0.2em;
    margin-right: 2%;
    display: inherit;
    padding: 0.6em 0.8em;
    font-size: 1.2em;
  }
",
                  ],
                },
                "displayName": "styled.input",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "id": "file-submit",
                "onClick": undefined,
                "type": "button",
                "value": "TO PDF",
              },
              "ref": null,
              "rendered": null,
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bZQynM",
                  "isStatic": true,
                  "rules": Array [
                    "
  & {
    width: 100%;
    height: 100%;
    ",
                    "
      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
    ",
                    ";
    display: flex;
    border-radius: inherit;
  }

  &#file-upload {
    display: none;
  }

  &#file-upload-block {
    display: none;
  }

  &#file-submit {
    font-weight: bold;
    background-color: ",
                    "#66d9e8",
                    ";
    border-radius: 0.2em;
    margin-right: 2%;
    display: inherit;
    padding: 0.6em 0.8em;
    font-size: 1.2em;

    :hover {
      color: white;
      background-color: ",
                    "#22b8cf",
                    ";
    }
    :active {
      background-color: ",
                    "#66d9e8",
                    ";
    }
  }

  &#file-submit-block {
    font-weight: bold;
    background-color: ",
                    "#66d9e8",
                    ";
    border-radius: 0.2em;
    margin-right: 2%;
    display: inherit;
    padding: 0.6em 0.8em;
    font-size: 1.2em;
  }
",
                  ],
                },
                "displayName": "styled.input",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bZQynM",
                "target": "input",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
          ],
          "type": "form",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "className": "none",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bwzfXH",
          "isStatic": true,
          "rules": Array [
            "
  & {
    display: flex;
    flex-direction: row-reverse;
    padding-right: 0.4%;

    form {
      display: inherit;
    }
  }
  &#hover {
    label {
      ",
            "
      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
    ",
            ";
      border-radius: 0.2em;
      background-color: ",
            "#66d9e8",
            ";
      display: inherit;
      padding: 0.6em 0.8em;
      text-align: center;
      font-size: 1.3em;
      margin-right: 2%;
      font-weight: bold;

      :hover {
        color: white;
        background-color: ",
            "#22b8cf",
            ";
      }
      :active {
        background-color: ",
            "#66d9e8",
            ";
      }
    }
  }
  &#block {
    label {
      ",
            "
      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
    ",
            ";
      border-radius: 0.2em;
      background-color: ",
            "#66d9e8",
            ";
      display: inherit;
      padding: 0.6em 0.8em;
      text-align: center;
      font-size: 1.3em;
      margin-right: 2%;
      font-weight: bold;
      color: ",
            "#868e96",
            ";
    }
  }
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bwzfXH",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-bxivhb",
        "isStatic": true,
        "rules": Array [
          "
  & {
    width: 100%;
    height: 100%;
    padding: 0.3%;
  }
    
    &.audio {
      padding-bottom : 0.5%;
    }
",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-bxivhb",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <ForwardRef
          id="hover"
        >
          <form>
            <label
              htmlFor="file-upload"
            >
              UPLOAD
            </label>
            <ForwardRef
              accept=".wav"
              id="file-upload"
              name="upload"
              type="file"
            />
            <ForwardRef
              disabled={true}
              id="file-submit-block"
              type="button"
              value="SUBMIT"
            />
            <ForwardRef
              id="file-submit"
              type="button"
              value="TO PDF"
            />
          </form>
          <AudioProgressbar
            className="none"
          />
        </ForwardRef>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <form>
              <label
                htmlFor="file-upload"
              >
                UPLOAD
              </label>
              <ForwardRef
                accept=".wav"
                id="file-upload"
                name="upload"
                type="file"
              />
              <ForwardRef
                disabled={true}
                id="file-submit-block"
                type="button"
                value="SUBMIT"
              />
              <ForwardRef
                id="file-submit"
                type="button"
                value="TO PDF"
              />
            </form>,
            <AudioProgressbar
              className="none"
            />,
          ],
          "id": "hover",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <label
                  htmlFor="file-upload"
                >
                  UPLOAD
                </label>,
                <ForwardRef
                  accept=".wav"
                  id="file-upload"
                  name="upload"
                  type="file"
                />,
                <ForwardRef
                  disabled={true}
                  id="file-submit-block"
                  type="button"
                  value="SUBMIT"
                />,
                <ForwardRef
                  id="file-submit"
                  type="button"
                  value="TO PDF"
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "UPLOAD",
                  "htmlFor": "file-upload",
                },
                "ref": null,
                "rendered": "UPLOAD",
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "accept": ".wav",
                  "id": "file-upload",
                  "name": "upload",
                  "onChange": undefined,
                  "type": "file",
                },
                "ref": null,
                "rendered": null,
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bZQynM",
                    "isStatic": true,
                    "rules": Array [
                      "
  & {
    width: 100%;
    height: 100%;
    ",
                      "
      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
    ",
                      ";
    display: flex;
    border-radius: inherit;
  }

  &#file-upload {
    display: none;
  }

  &#file-upload-block {
    display: none;
  }

  &#file-submit {
    font-weight: bold;
    background-color: ",
                      "#66d9e8",
                      ";
    border-radius: 0.2em;
    margin-right: 2%;
    display: inherit;
    padding: 0.6em 0.8em;
    font-size: 1.2em;

    :hover {
      color: white;
      background-color: ",
                      "#22b8cf",
                      ";
    }
    :active {
      background-color: ",
                      "#66d9e8",
                      ";
    }
  }

  &#file-submit-block {
    font-weight: bold;
    background-color: ",
                      "#66d9e8",
                      ";
    border-radius: 0.2em;
    margin-right: 2%;
    display: inherit;
    padding: 0.6em 0.8em;
    font-size: 1.2em;
  }
",
                    ],
                  },
                  "displayName": "styled.input",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bZQynM",
                  "target": "input",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "disabled": true,
                  "id": "file-submit-block",
                  "onClick": undefined,
                  "type": "button",
                  "value": "SUBMIT",
                },
                "ref": null,
                "rendered": null,
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bZQynM",
                    "isStatic": true,
                    "rules": Array [
                      "
  & {
    width: 100%;
    height: 100%;
    ",
                      "
      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
    ",
                      ";
    display: flex;
    border-radius: inherit;
  }

  &#file-upload {
    display: none;
  }

  &#file-upload-block {
    display: none;
  }

  &#file-submit {
    font-weight: bold;
    background-color: ",
                      "#66d9e8",
                      ";
    border-radius: 0.2em;
    margin-right: 2%;
    display: inherit;
    padding: 0.6em 0.8em;
    font-size: 1.2em;

    :hover {
      color: white;
      background-color: ",
                      "#22b8cf",
                      ";
    }
    :active {
      background-color: ",
                      "#66d9e8",
                      ";
    }
  }

  &#file-submit-block {
    font-weight: bold;
    background-color: ",
                      "#66d9e8",
                      ";
    border-radius: 0.2em;
    margin-right: 2%;
    display: inherit;
    padding: 0.6em 0.8em;
    font-size: 1.2em;
  }
",
                    ],
                  },
                  "displayName": "styled.input",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bZQynM",
                  "target": "input",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "id": "file-submit",
                  "onClick": undefined,
                  "type": "button",
                  "value": "TO PDF",
                },
                "ref": null,
                "rendered": null,
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-bZQynM",
                    "isStatic": true,
                    "rules": Array [
                      "
  & {
    width: 100%;
    height: 100%;
    ",
                      "
      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
    ",
                      ";
    display: flex;
    border-radius: inherit;
  }

  &#file-upload {
    display: none;
  }

  &#file-upload-block {
    display: none;
  }

  &#file-submit {
    font-weight: bold;
    background-color: ",
                      "#66d9e8",
                      ";
    border-radius: 0.2em;
    margin-right: 2%;
    display: inherit;
    padding: 0.6em 0.8em;
    font-size: 1.2em;

    :hover {
      color: white;
      background-color: ",
                      "#22b8cf",
                      ";
    }
    :active {
      background-color: ",
                      "#66d9e8",
                      ";
    }
  }

  &#file-submit-block {
    font-weight: bold;
    background-color: ",
                      "#66d9e8",
                      ";
    border-radius: 0.2em;
    margin-right: 2%;
    display: inherit;
    padding: 0.6em 0.8em;
    font-size: 1.2em;
  }
",
                    ],
                  },
                  "displayName": "styled.input",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-bZQynM",
                  "target": "input",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
            ],
            "type": "form",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "none",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": true,
            "rules": Array [
              "
  & {
    display: flex;
    flex-direction: row-reverse;
    padding-right: 0.4%;

    form {
      display: inherit;
    }
  }
  &#hover {
    label {
      ",
              "
      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
    ",
              ";
      border-radius: 0.2em;
      background-color: ",
              "#66d9e8",
              ";
      display: inherit;
      padding: 0.6em 0.8em;
      text-align: center;
      font-size: 1.3em;
      margin-right: 2%;
      font-weight: bold;

      :hover {
        color: white;
        background-color: ",
              "#22b8cf",
              ";
      }
      :active {
        background-color: ",
              "#66d9e8",
              ";
      }
    }
  }
  &#block {
    label {
      ",
              "
      box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);
    ",
              ";
      border-radius: 0.2em;
      background-color: ",
              "#66d9e8",
              ";
      display: inherit;
      padding: 0.6em 0.8em;
      text-align: center;
      font-size: 1.3em;
      margin-right: 2%;
      font-weight: bold;
      color: ",
              "#868e96",
              ";
    }
  }
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bxivhb",
          "isStatic": true,
          "rules": Array [
            "
  & {
    width: 100%;
    height: 100%;
    padding: 0.3%;
  }
    
    &.audio {
      padding-bottom : 0.5%;
    }
",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bxivhb",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
